=============================================================================
List of generated methods in project: SeismicPi_Firmware

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "pin_mux"   (component PinSettings)
   - pin_mux_hardware_init -This method sets registers according routing settings. Call this method in user code to route 
                desired pins into peripherals. The method is useful for reinitialization HW after some routing changes.
   - pin_mux_configure_ftm_pins -FTM method sets registers according routing settings. Call this method code to route desired 
                pins into FTM0, FTM1, FTM2, FTM3 peripherals.
   - pin_mux_configure_gpio_pins -GPIO method sets registers according routing settings. Call this method code to route desired 
                pins into PTA, PTB, PTC, PTD, PTE peripherals.
   - pin_mux_configure_i2c_pins -I2C method sets registers according routing settings. Call this method code to route desired 
                pins into I2C0, I2C1 peripherals.
   - pin_mux_configure_i2s_pins -I2S method sets registers according routing settings. Call this method code to route desired 
                pins into I2S0 peripheral.
   - pin_mux_configure_jtag_pins -JTAG method sets registers according routing settings. Call this method code to route desired 
                pins into JTAG peripheral.
   - pin_mux_configure_llwu_pins -LLWU method sets registers according routing settings. Call this method code to route desired 
                pins into LLWU peripheral.
   - pin_mux_configure_osc_pins -OSC method sets registers according routing settings. Call this method code to route desired 
                pins into OSC peripheral.
   - pin_mux_configure_rtc_pins -RTC method sets registers according routing settings. Call this method code to route desired 
                pins into RTC peripheral.
   - pin_mux_configure_spi_pins -SPI method sets registers according routing settings. Call this method code to route desired 
                pins into SPI0, SPI1 peripherals.
   - pin_mux_configure_uart_pins -UART method sets registers according routing settings. Call this method code to route desired 
                pins into UART0, UART1, UART2 peripherals.

Module "RTC"       (component RTC_LDD)
   - RTC_Init -Initializes the device. There are two modes of initialization.   1) RTC device is NOT battery backed up. 
                (SoftInit = FALSE)     All registers (interrupts, counters, clock routing …) that influence RTC behavior are 
                initialized.      Note: This initialization mode doesn't preserve time and date settings.   2) RTC device IS 
                battery backed up.     (SoftInit = TRUE). Only registers that are not backed up are initialized (Interrupt 
                priority …). RTC device is running, time and date a preserved, RTC interrupts (events) are preserved too.   
                Allocates memory for the device data structure.   This method can be called only once. Before the second call 
                of Init() the Deinit() must be called first.
   - RTC_GetTime -Returns actual time and date.    Note: Fields not supported by HW are calculated in software.
   - RTC_SetTime -Sets new time and date.   Note: All LDD_RTC_TTime structure members must be correctly filled in.

Module "ButtonStartStop" (component GPIO_LDD)
   - ButtonStartStop_Init -This method initializes the associated peripheral(s) and the component internal variables. The 
                method is called automatically as a part of the application initialization code.
   - ButtonStartStop_SetFieldValue -This method sets the output data value of the specified bit field.
   - ButtonStartStop_GetFieldValue -This method returns the current input data of the specified field.
   - ButtonStartStop_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - ButtonStartStop_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - ButtonStartStop_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.

Module "LEDRed"    (component GPIO_LDD)
   - LEDRed_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.
   - LEDRed_SetFieldValue -This method sets the output data value of the specified bit field.
   - LEDRed_GetFieldValue -This method returns the current input data of the specified field.
   - LEDRed_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - LEDRed_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - LEDRed_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.

Module "TimerMillis" (component TimerInt_LDD)
   - TimerMillis_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - TU1_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.
   - TU1_SetEventMask -Enables/disables event(s). The events contained within the mask are enabled. Events not contained within 
                the mask are disabled. The component event masks are defined in the PE_Types.h file. Note: Event that are not 
                generated (See the "Events" tab in the Component inspector) are not handled by this method. In this case the 
                method returns ERR_PARAM_MASK error code. See also method <GetEventMask>.

Module "LEDGreen"  (component GPIO_LDD)
   - LEDGreen_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.
   - LEDGreen_SetFieldValue -This method sets the output data value of the specified bit field.
   - LEDGreen_GetFieldValue -This method returns the current input data of the specified field.
   - LEDGreen_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - LEDGreen_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - LEDGreen_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.

Module "UART"      (component AsynchroSerial)
   - UART_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the preferred 
                method to handle error and break exception in the interrupt mode is to use events <OnError> and <OnBreak> the 
                return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an 
                exception in interrupt mode is returned only if there is a valid character ready to be read.
   - UART_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - UART_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental error), 
                otherwise it returns an error code (it does not wait for data).  This method is available only if non-zero 
                length of the input buffer is defined and the receiver property is enabled.  If less than requested number of 
                characters is received only the available data is copied from the receive buffer to the user specified 
                destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter is set to 
                the number of received characters.
   - UART_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the 
                output buffer is defined and the transmitter property is enabled.
   - UART_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - UART_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled.
   - UART_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled.
   - UART_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "LEDBlue"   (component GPIO_LDD)
   - LEDBlue_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.
   - LEDBlue_SetFieldValue -This method sets the output data value of the specified bit field.
   - LEDBlue_GetFieldValue -This method returns the current input data of the specified field.
   - LEDBlue_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - LEDBlue_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - LEDBlue_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.

Module "SDCS"      (component GPIO_LDD)
   - SDCS_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is called 
                automatically as a part of the application initialization code.
   - SDCS_SetFieldValue -This method sets the output data value of the specified bit field.
   - SDCS_GetFieldValue -This method returns the current input data of the specified field.
   - SDCS_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - SDCS_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - SDCS_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.

Module "SDCD"      (component GPIO_LDD)
   - SDCD_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is called 
                automatically as a part of the application initialization code.
   - SDCD_SetFieldValue -This method sets the output data value of the specified bit field.
   - SDCD_GetFieldValue -This method returns the current input data of the specified field.
   - SDCD_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - SDCD_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - SDCD_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.

Module "DMA1"      (component DMAController)

Module "FLASH"     (component IntFLASH)
   - FLASH_DisableEvent -This method disables all the events except <OnSaveBuffer>, <OnRestoreBuffer> and <OnEraseError>. The 
                method is available only if any event is enabled.
   - FLASH_EnableEvent -This method enables all the events except <OnSaveBuffer>, <OnRestoreBuffer> and <OnEraseError>. The 
                method is available only if any event is enabled.
   - FLASH_SetBlockFlash -Writes data to FLASH. The operation of this method depends on the "Write method" property and state 
                of the flash. Please see more details on general info page of the help.
   - FLASH_GetBlockFlash -Reads data from FLASH.

Module "ADCCS"     (component GPIO_LDD)
   - ADCCS_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.
   - ADCCS_SetFieldValue -This method sets the output data value of the specified bit field.
   - ADCCS_GetFieldValue -This method returns the current input data of the specified field.
   - ADCCS_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - ADCCS_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - ADCCS_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.

Module "SPI_ADC"   (component SPIMaster_LDD)
   - SPI_ADC_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - SPI_ADC_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. The method <CancelBlockTransmission> can be used to cancel a transmit operation. This method 
                finishes immediately after calling it - it doesn't wait the end of data transmission. Use event <OnBlockSent> 
                to check the end of data transmission or method GetSentDataNum to check the state of sending.
   - SPI_ADC_ReceiveBlock -This method specifies the number of data to receive. The method returns ERR_BUSY until the specified 
                number of characters is received. The method <CancelBlockReception> can be used to cancel a running receive 
                operation. If a receive operation is not in progress (the method was not called or a previous operation has 
                already finished) all received characters will be lost without any notification. To prevent the loss of data 
                call the method immediately after the last receive operation has finished (e.g. from the <OnBlockReceived> 
                event). This method finishes immediately after calling it - it doesn't wait the end of data reception. Use 
                event <OnBlockReceived> to check the end of data reception or method GetReceivedDataNum to check the state of 
                receiving.
   - SPI_ADC_Main -This method is available only in the polling mode (Interrupt service/event = 'no'). If interrupt service is 
                disabled this method replaces the interrupt handler. This method should be called if Receive/SendBlock was 
                invoked before in order to run the reception/transmission. The end of the receiving/transmitting is indicated 
                by OnBlockSent or OnBlockReceived event.

Module "ADC_DR"    (component GPIO_LDD)
   - ADC_DR_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.
   - ADC_DR_SetFieldValue -This method sets the output data value of the specified bit field.
   - ADC_DR_GetFieldValue -This method returns the current input data of the specified field.
   - ADC_DR_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - ADC_DR_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - ADC_DR_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.

Module "ADC_Accel" (component ADC)
   - ADC_Accel_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If 
                the <number of conversions> is more than one the conversion of A/D channels is performed specified number of 
                times.)
   - ADC_Accel_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this 
                method returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is 
                less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - ADC_Accel_Calibrate -This method starts self calibration process. Calibration is typically used to remove the effects of 
                the gain and offset from a specific reading.

Module "CS1"       (component CriticalSection)
   - CS1_CriticalVariable -Defines a variable if necessary. This is a macro.
   - CS1_EnterCritical -Enters a critical section
   - CS1_ExitCritical -Exits a critical section

Module "USB1"      (component FSL_USB_Stack)
   - USB1_Deinit -Deinitializes the driver
   - USB1_Init -Initializes the driver

Module "SPI_SD"    (component SPIMaster_LDD)
   - SPI_SD_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - SPI_SD_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. The method <CancelBlockTransmission> can be used to cancel a transmit operation. This method 
                finishes immediately after calling it - it doesn't wait the end of data transmission. Use event <OnBlockSent> 
                to check the end of data transmission or method GetSentDataNum to check the state of sending.
   - SPI_SD_ReceiveBlock -This method specifies the number of data to receive. The method returns ERR_BUSY until the specified 
                number of characters is received. The method <CancelBlockReception> can be used to cancel a running receive 
                operation. If a receive operation is not in progress (the method was not called or a previous operation has 
                already finished) all received characters will be lost without any notification. To prevent the loss of data 
                call the method immediately after the last receive operation has finished (e.g. from the <OnBlockReceived> 
                event). This method finishes immediately after calling it - it doesn't wait the end of data reception. Use 
                event <OnBlockReceived> to check the end of data reception or method GetReceivedDataNum to check the state of 
                receiving.
   - SPI_SD_GetBlockSentStatus -This method returns whether the transmitter is finished transmitting all data block. The status 
                flag is accumulated, after calling this method the status is returned and cleared (set to "false" state). This 
                method is available only if method SendBlock is enabled.
   - SPI_SD_GetBlockReceivedStatus -This method returns whether the receiver is finished reception of all data block. The 
                status flag is accumulated, after calling this method the status is returned and cleared (set to "false" state).
                This method is available only if method ReceiveBlock is enabled.
   - SPI_SD_SelectConfiguration -This method selects attributes of communication from the <Attribute set list> and select a 
                chip select from the <Chip select list>. Once any configuration is selected, a transmission can be started 
                multiple times. This method is available if number of chip selects or number of attribute set is greater than 1.
                If the device doesn't support chip select functionality the ChipSelect parameter is ignored.

Module "Cpu"       (component MK22FN128LH10)
   - Cpu_SetClockConfiguration -Calling of this method will cause the clock configuration change and reconfiguration of all 
                components according to the requested clock configuration setting.
   - Cpu_GetClockConfiguration -Returns the active clock configuration identifier. The method is automatically enabled if more 
                than one clock configuration is enabled in the component.
   - Cpu_SystemReset -This method initiates a system reset request to reset the CPU.

===================================================================================
