=============================================================================
List of generated methods in project: SeismicPi_Bootloader

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "pin_mux"   (component PinSettings)
   - pin_mux_hardware_init -This method sets registers according routing settings. Call this method in user code to route 
                desired pins into peripherals. The method is useful for reinitialization HW after some routing changes.
   - pin_mux_configure_ftm_pins -FTM method sets registers according routing settings. Call this method code to route desired 
                pins into FTM0, FTM1, FTM2, FTM3 peripherals.
   - pin_mux_configure_gpio_pins -GPIO method sets registers according routing settings. Call this method code to route desired 
                pins into PTA, PTB, PTC, PTD, PTE peripherals.
   - pin_mux_configure_i2c_pins -I2C method sets registers according routing settings. Call this method code to route desired 
                pins into I2C0, I2C1 peripherals.
   - pin_mux_configure_i2s_pins -I2S method sets registers according routing settings. Call this method code to route desired 
                pins into I2S0 peripheral.
   - pin_mux_configure_jtag_pins -JTAG method sets registers according routing settings. Call this method code to route desired 
                pins into JTAG peripheral.
   - pin_mux_configure_llwu_pins -LLWU method sets registers according routing settings. Call this method code to route desired 
                pins into LLWU peripheral.
   - pin_mux_configure_osc_pins -OSC method sets registers according routing settings. Call this method code to route desired 
                pins into OSC peripheral.
   - pin_mux_configure_rtc_pins -RTC method sets registers according routing settings. Call this method code to route desired 
                pins into RTC peripheral.
   - pin_mux_configure_spi_pins -SPI method sets registers according routing settings. Call this method code to route desired 
                pins into SPI0, SPI1 peripherals.
   - pin_mux_configure_uart_pins -UART method sets registers according routing settings. Call this method code to route desired 
                pins into UART0, UART1, UART2 peripherals.

Module "SPI_SD"    (component SPIMaster_LDD)
   - SPI_SD_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - SPI_SD_Deinit -This method deinitializes the device. It switches off the device, frees the device data structure memory, 
                interrupts vectors, etc.
   - SPI_SD_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. The method <CancelBlockTransmission> can be used to cancel a transmit operation. This method 
                finishes immediately after calling it - it doesn't wait the end of data transmission. Use event <OnBlockSent> 
                to check the end of data transmission or method GetSentDataNum to check the state of sending.
   - SPI_SD_ReceiveBlock -This method specifies the number of data to receive. The method returns ERR_BUSY until the specified 
                number of characters is received. The method <CancelBlockReception> can be used to cancel a running receive 
                operation. If a receive operation is not in progress (the method was not called or a previous operation has 
                already finished) all received characters will be lost without any notification. To prevent the loss of data 
                call the method immediately after the last receive operation has finished (e.g. from the <OnBlockReceived> 
                event). This method finishes immediately after calling it - it doesn't wait the end of data reception. Use 
                event <OnBlockReceived> to check the end of data reception or method GetReceivedDataNum to check the state of 
                receiving.
   - SPI_SD_SelectConfiguration -This method selects attributes of communication from the <Attribute set list> and select a 
                chip select from the <Chip select list>. Once any configuration is selected, a transmission can be started 
                multiple times. This method is available if number of chip selects or number of attribute set is greater than 1.
                If the device doesn't support chip select functionality the ChipSelect parameter is ignored.

Module "Cpu"       (component MK22FN128LH10)
   - Cpu_SystemReset -This method initiates a system reset request to reset the CPU.

===================================================================================
